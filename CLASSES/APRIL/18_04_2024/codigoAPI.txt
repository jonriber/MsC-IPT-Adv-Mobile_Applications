
// Add Retrofit Dependencies
// https://square.github.io/retrofit/
implementation("com.squareup.retrofit2:retrofit:2.6.2")
implementation("com.squareup.retrofit2:converter-gson:2.3.0")




<!--permissions for INTERNET access-->
<uses-permission android:name="android.permission.INTERNET" />
<!-- poderá ser necessário, também
 <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
-->




private val gson: Gson = GsonBuilder().setLenient().create()
private val host = "https://adamastor.ipt.pt/DAM-API/"

private val retrofit =
  Retrofit.Builder().baseUrl(host)
      .addConverterFactory(GsonConverterFactory.create(gson))
      .build()

fun noteService(): NoteService = retrofit.create(NoteService::class.java)




class NoteListAdapter(
    private val notes: List<Note>,
    private val context: Context
) : RecyclerView.Adapter<NoteListAdapter.ViewHolder>() {

    override fun onBindViewHolder(holder: ViewHolder, position: Int) {
        val note = notes[position]
        holder?.let {
            it.bindView(note)
        }
    }

    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {
        val view = LayoutInflater.from(context).inflate(R.layout.note_item, parent, false)
        return ViewHolder(view)
    }

    override fun getItemCount(): Int {
        return notes.size
    }

    /**
     * atribui os valores da 'note' ao objeto que os vai representar na interface
     */
    class ViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {
        fun bindView(note: Note) {
            val title: TextView = itemView.findViewById(R.id.noteItem_title)
            val description: TextView = itemView.findViewById(R.id.noteItem_description)

            title.text = note.title
            description.text = note.description
        }
    }
}





private fun processList(call: Call<List<Note>>) {
  call.enqueue(object : Callback<List<Note>?> {
      override fun onResponse(call: Call<List<Note>?>?,
                              response: Response<List<Note>?>?) {
          response?.body()?.let {
              val notes: List<Note> = it
              // configureList(notes)
          }
      }
      override fun onFailure(call: Call<List<Note>?>?, t: Throwable?) {
          t?.printStackTrace()
          t?.message?.let { Log.e("onFailure error", it) }
      }
  })
}





private fun configureList(notes: List<Note>) {
     val recyclerView: RecyclerView = findViewById(R.id.nodeList)
     recyclerView.adapter = NoteListAdapter(notes, this)
     val layoutManager = StaggeredGridLayoutManager(
             2, StaggeredGridLayoutManager.VERTICAL
     )
     recyclerView.layoutManager = layoutManager
 }
